plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdk 32
    defaultConfig {
        minSdkVersion 21
        targetSdk 32
        versionCode 1
        versionName '1.0.0'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"
    implementation "com.google.android.material:material:1.5.0"

    testImplementation "junit:junit:4.13.2"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = 'com.github.inbalboa'
                artifactId = 'calcdialog'
                version = '1.0'
            }
        }
    }
}

def getTag() {
    def changelog = file("../CHANGELOG.md")
    def lines = changelog.readLines()

    def match
    for (line in lines) {
        match = line =~ /^#+\s*v(.+)$/
        if (match.find()) {
            return match.group(1)
        }
    }

    throw new GradleException("No release tag found in CHANGELOG.md")
}

def getBody(String tag) {
    def changelog = file("../CHANGELOG.md")

    def lines = changelog.readLines()
    def versionChanges = new StringBuilder()
    def foundVersion = false
    for (line in lines) {
        if (foundVersion && line ==~ /^#+\s*v.+$/) {
            break
        } else if (line ==~ /^#+\s*v$tag$/) {
            foundVersion = true
        } else if (foundVersion) {
            versionChanges.append(line)
            versionChanges.append(System.getProperty("line.separator"))
        }
    }
    if (!foundVersion) {
        throw new GradleException("No release notes for version $tag")
    }

    return versionChanges.toString().trim()
}

task release {
    def tag = getTag()
    def body = getBody(tag)
    doLast {
        exec {
            commandLine 'git', 'tag', '-a', 'v' + tag, '-m', body
        }
        exec {
            commandLine 'git', 'push', '--atomic', 'origin', 'main', 'v' + tag
        }
    }
}
